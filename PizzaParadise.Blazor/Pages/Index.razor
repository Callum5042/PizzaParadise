@page "/"
@page "/Order"
@page "/Order/{Category}"
@using MassTransit
@using Microsoft.EntityFrameworkCore
@using PizzaParadise.Blazor.Contracts
@using PizzaParadise.Blazor.Data
@using PizzaParadise.Entities
@inject IDbContextFactory<PizzaParadiseContext> DbContextFactory
@inject IBusControl BusControl

<PageTitle>Order</PageTitle>

<AuthorizeView>
    <Authorized>
        This content is displayed only if the user is Authorized
    </Authorized>
    <NotAuthorized>
        This content is displayed if the user is Not Authorized
    </NotAuthorized>
</AuthorizeView>

<button type="button" class="btn btn-outline-primary" @onclick="(() => SendEmailAsync())">Send Email</button>

<div class="d-flex flex-row justify-content-start">

    <div class="categories-container sticky">
        <CategoryNavbar />
    </div>


    <div class="flex-grow-1 ms-3 me-3">
        @if (products.Any())
        {
            foreach (var product in products)
            {
                <div class="card mb-3" @onclick="(() => AddToBasket(0, product.Name!, product.Price.GetValueOrDefault()))">
                    <div class="card-body">
                        @product.Price?.ToString("c") - @product.Name
                    </div>
                </div>
            }
        }
        else
        {
            <div>
                There is nothing available to select
            </div>
        }
    </div>

    <div class="sticky">
        <div class="card">
            <h5 class="card-header">
                Basket
            </h5>
            <div class="card-body">
                @foreach (var item in Items)
                {
                    <p>
                        @item.ProductName - @item.Price?.ToString("c")
                    </p>
                }
                Total: @Items.Sum(x => x.Price)?.ToString("c")

                <br />
                <button type="button" class="btn btn-outline-primary" @onclick="(() => CheckoutBasket())">Checkout</button>
            </div>
        </div>
    </div>

</div>

@code {

    private class ProductDetails
    {
        public string? Name { get; set; }

        public decimal? Price { get; set; }
    }

    private IList<ProductDetails> products = new List<ProductDetails>();

    private IList<Basket> Items = new List<Basket>();

    public decimal CheckoutTotal { get; set; }

    [Parameter]
    public string? Category { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        using var context = DbContextFactory.CreateDbContext();

        var category = Category?.ToLower();

        products = await context.Products
            .Where(x => x.ProductCategory.Name.ToLower() == category)
            .Select(x => new ProductDetails()
            {
                Name = x.Name,
                Price = x.Price
            })
            .ToListAsync();
    }

    private void AddToBasket(int id, string name, decimal price)
    {
        Items.Add(new Basket()
        {
            ProductName = name,
            Price = price
        });
    }

    private void CheckoutBasket()
    {

    }

    private async Task SendEmailAsync()
    {
        await BusControl.Publish(new EmailContract()
        {
            EmailBody = "Test email"
        });
    }
}